<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Gamedev Canvas Workshop</title>
  <style>
    * { padding: 0; margin: 0;}
    canvas { background: #eee; display: block; margin:0 auto; }
    body {
      background-color:black;
    }
    h1 {
      text-align: center;
      padding: 20px;
      font-family: monospace;
    }
  </style>
</head>
<body>
<div>
  <h1>TYTUŁ</h1>
</div>
<canvas onmousedown="pressed.enterOrMouse = true;" onmouseup="pressed.enterOrMouse = false;"id="myCanvas" width="480" height="320"></canvas>
<script>
  var canvas = document.getElementById("myCanvas");//znajduję canvas żeby javascript wiedziało o jego istnieniu
  var ctx = canvas.getContext("2d");// ctx to cusiek rządzący dwuwymiarowymi ksztautami
  var x = canvas.width/2;//początkowe x piłki
  var y = canvas.height-30;//początkowe y piłki
  var dx = 0;// iksowa prędkość piłki
  var dy = 0;//igrekowa prędkość piłki
  var TimeMiliseconds = 0;
  var scoreToWin = 0;
  var ballRadius = 10;
  var paddleHeight = 10;
  var paddleWidth = 75;
  var paddleX = (canvas.width - paddleWidth) / 2;
  var pressed = {
    right: false,
    left: false,
    up: false,
    down: false,
    enter: false
  }
  var brick = {
    width: 75,
    height: 20,
    padding: 10,
    offsetTop: 30,
    offsetLeft: 30
  }
  var arrow = {
    endX:200,
    endY: 200,
    lenght: 50,
    angle: 45
  }
  var score = 0;
  var lives = 4;
  var bricks = [];
  var ballInBrickX = false;
  var ballInBrickY = false;
  document.addEventListener("keydown", keyDownHandler, false);  //klawisz jest wciśnięty = uruchomienie funkcji keyDownHandler()
  document.addEventListener("keyup", keyUpHandler, false);
  document.addEventListener("mousemove", mouseMoveHandler, false);


  function createLevel(name, arr) {
    let ans = {
      name: name,
      grid: [],
      thisScoreToWin: 0
    }
    for (c in arr) {
      ans.grid.push([])
      for (r in arr[c]) {
        ans.grid[c][r] = {status: arr[c][r]}
        ans.thisScoreToWin += ans.grid[c][r]['status']
        console.log(ans.grid[c][r]['status'])
      }

    }
    return ans
  }

  var lvl1 = createLevel('some level', [
    [1, 2, 3, 0],
    [1, 0, 2, 1],
    [1, 0, 1, 1],
    [1, 0, 2, 1],
    [1, 2, 1, 0],
  ])
  var bricks = lvl1.grid
  var scoreToWin = lvl1.thisScoreToWin


function mouseMoveHandler(e) {
    var relativeX = e.clientX - canvas.offsetLeft;//ustawiam relativeX względem canvas a nie okna
    if (relativeX > paddleWidth/2 && relativeX < canvas.width - paddleWidth/2 ) {
      paddleX = relativeX - paddleWidth/2;
    } else {
      if (relativeX < paddleWidth/2) {
        paddleX = 0;
      } else {
        paddleX = canvas.width - paddleWidth;
      }
    }
}//ustawia relativeX na x myszy względem canvas i rusza paletką jeśli mysz jest w canvas.
function keyDownHandler(e) {//zmienia wartośćfunkcji klawiszowykrywających na true kiedy są wciśnięte
  if(e.key == "Right" || e.key == "ArrowRight") {
        pressed.right = true;
    }
  if(e.key == "Left" || e.key == "ArrowLeft") {
        pressed.left = true;
    }
  if(e.key == "Up" || e.key == "ArrowUp") {
      pressed.up = true;
  }
  if(e.key == "Down" || e.key == "ArrowDown") {
      pressed.down = true;
  }
  if(e.key == "Enter") {
     pressed.enterOrMouse= true;
     console.log("enter");
  }
}
function keyUpHandler(e) {//zmienia wartośćfunkcji klawiszowykrywających na false kiedy są niewciśnięte
    if(e.key == "Right" || e.key == "ArrowRight") {
        pressed.right = false;
    }
    if(e.key == "Left" || e.key == "ArrowLeft") {
        pressed.left = false;
    }
    if(e.key == "Up" || e.key == "ArrowUp") {
        pressed.up = false;
    }
    if(e.key == "Down" || e.key == "ArrowDown") {
        pressed.down = false;
    }
    if(e.key == "Enter") {
          pressed.enterOrMouse = false;
      }

}
function brickCollisionDetection() {
  for (var c=0; c<bricks.length; c++) {
    for (var r=0; r<bricks[0].length; r++) {
      var b = bricks[c][r];
      if(b.status > 0) {
        ballInBrickX = (x+ballRadius)>b.x && (x-ballRadius)<b.x + brick.width;//sprawdzam czy x piłki jest gdzieś w x cegły
        ballInBrickY = (y+ballRadius)>b.y && (y-ballRadius)<b.y + brick.height;//sprawdzam czy y piłki jest gdzieś w y cegły;
        if (ballInBrickX && ballInBrickY) {
          dy = -dy;//zawracam
          b.status--;//znikam cegłę
          score++;

        }//koniec wykrywacza kolizjii
      }//koniec skanowania rozważanej cegły
    }//koniec jechania po rzędach
  }//koniec jechania po kolumnach
}//koniec brickCollisionDetection()//znika stuknięte cegły i informuje o wygranej
function wallAndPaddleCollisionDetection() {
  //jeśli piłka ZARAZ wleci w ścianę, to zawraca:
  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {// jeśli ZARAZ walnie w prawą albo lewą ścianę:
    dx = -dx;
  }
  if (y + dy < ballRadius) {//jeśli dotyka sufitu
    dy = -dy;
  }
  else if(y + dy > canvas.height - ballRadius) {//jeśli dotyka podłogi
    if(x > paddleX && x < paddleX + paddleWidth) {//jeśli jest między lewym a prawym brzegiem paletki to żyjemy
      dx = (x-paddleX - paddleWidth/2 - 10)/16;//NIE KASOWAĆ!!! należy rozszerzyć na ewentualną szeroką i wąską paletkę
      dy = -dy;
    }
    else {//jeśli nie trafi w paletkę to tracimy życie
      lives--;
      //Powracamy do pozycji początkowej
      dy = 0;//zamraża ruch pilki
      dx = 0;
      x = canvas.width/2;
      y = canvas.height- paddleHeight - ballRadius - 1;
      paddleX = (canvas.width-paddleWidth)/2;
      arrow.angle = 90;
      drawArrow();
    }
  }//koniec czujnika dotykania podłogi
}
function movePaddle(speed) {
  if(pressed.right) {
    paddleX += speed;
    if (paddleX + paddleWidth > canvas.width) {
        paddleX = canvas.width - paddleWidth;//jeśli ZARAZ
    }
  }
  else if(pressed.left) {
      paddleX -= speed;
      if (paddleX < 0){
          paddleX = 0;
      }
  }
}
function moveArrow(speed) {
  if(pressed.up ) {
    arrow.angle += speed;
    if (arrow.angle > 170) {
        arrow.angle = 170;
    }
  }
  else if(pressed.down) {
      arrow.angle -= speed;
      if (arrow.angle < 10){
          arrow.angle = 10;
      }
  }
  canvas.onwheel = function(event) {
    arrow.angle -= event.deltaY;
    if (arrow.angle > 170) {
        arrow.angle = 170;
    }
    if (arrow.angle < 10){
        arrow.angle = 10;
    }
  }
}
function clearCanvas(color) {
  ctx.fillStyle = color;
  ctx.beginPath();
  ctx.rect(0, 0, canvas.width, canvas.height); // gumkuje całe canvas
  ctx.fill();
  ctx.closePath();
}
function drawScore() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "white";
  ctx.fillText("SCORE: " + score, 8, 20);
}
function drawLives() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "white";
  ctx.fillText("LIVES " + lives, canvas.width-65, 20);
}
function drawBall() {
    ctx.beginPath();
    ctx.arc(x, y, ballRadius, 0, Math.PI*2);//tworzy niewidzialne koło
    ctx.fillStyle = "white";//ustawia domyślny kolor kolorowania
    ctx.fill();// koloruje niewidzialne koło żeby było je widać
    ctx.closePath();
}//koniec funkcji drawBall()
function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
  ctx.fillStyle = "white";
  ctx.fill();
  ctx.closePath();
}
function drawArrow() {
  ctx.lineWidth = 3;
  ctx.strokeStyle = "#676767";
  ctx.beginPath();
  ctx.moveTo(paddleX + paddleWidth/2, canvas.height - paddleHeight -ballRadius -10);
  arrow.endX = paddleX + paddleWidth/2 + arrow.lenght*Math.cos(arrow.angle*Math.PI/180)
  arrow.endY = canvas.height - paddleHeight - 2*ballRadius - arrow.lenght*Math.sin(arrow.angle*Math.PI/180)
  ctx.lineTo(arrow.endX, arrow.endY);
  ctx.stroke();
  ctx.lineWidth = 1;
}
function drawBricks(grid='bricks',) {
      for(var c=0; c<bricks.length; c++) {
        for(var r=0; r<bricks[0].length; r++) {
          if (grid[c][r].status > 0){
            var brickX = (c * (brick.width + brick.padding)) + brick.offsetLeft;//OBLICZA odpowiednio x cegły
            var brickY = (r * (brick.height + brick.padding)) + brick.offsetTop;//OBLICZA odpowiednio y
            grid[c][r].x = brickX;//USTAWIA x cegły na obliczoną wyżej wartość
            grid[c][r].y = brickY;//USTAWIA y cegły na obliczoną wyżej wartość
            ctx.beginPath();
            ctx.rect(brickX, brickY, brick.width, brick.height);
            if (grid[c][r].status == 4) {
              ctx.fillStyle = "#ffee54";
            }
            if (grid[c][r].status == 3) {
              ctx.fillStyle = "#ff9800";
            }
            if (grid[c][r].status == 2) {
              ctx.fillStyle = "#f43636";
            }
            if (grid[c][r].status == 1) {
              ctx.fillStyle = "#bd00ba";
            }
            ctx.fill();
            ctx.closePath();
          }//koniec sprawdzacza statusu
        }
      }
    }//koniec funkcji drawBricks

function draw() {
  if (score == scoreToWin) {
    clearCanvas("#2a2a2a");
    drawScore();
    drawLives();
    ctx.font = "40px Arial";
    ctx.fillStyle = "yellow";
    ctx.fillText("VICTORY", 120, canvas.width/2 - 70);
    window.cancelAnimationFrame(draw);
  } else {
    if (lives > 0) {
      clearCanvas("#3a3a3a");
      drawBricks(bricks);//tu wpisz poziom
      drawBall();
      drawPaddle();
      drawScore();
      drawLives();
      brickCollisionDetection();
      wallAndPaddleCollisionDetection();
      if (dx == 0 && dy == 0) {//jeśli piłka jest zamrożona enter ją porusza
        if (pressed.enterOrMouse) {
          dx = (paddleX + paddleWidth/2 - arrow.endX)/-15;
          dy = (arrow.endY - y)/15;
        }
        x = paddleX + paddleWidth/2;
        drawArrow();//rysuje strzałkę do strzelania
        drawBall();
      }
      movePaddle(6);
      moveArrow(3);
      x += dx;
      y += dy;
      requestAnimationFrame(draw);
    } else {//jeśli nie ma żyć
      clearCanvas("#2a2a2a");
      drawBricks(bricks);//tu wpisz poziom
      drawScore();
      drawLives();
      drawPaddle();
      ctx.font = "40px Arial";
      ctx.fillStyle = "yellow";
      ctx.fillText("GAME OVER", 120, canvas.width/2 - 70);
    }
  }//koniec niewygranej gry

  TimeMiliseconds += 10;
  }//koniec funkcji draw
draw();

</script>

</body>
</html>
