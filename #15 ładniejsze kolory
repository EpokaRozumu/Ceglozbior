<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Gamedev Canvas Workshop</title>
  <style>
    * { padding: 0; margin: 0;}
    canvas { background: #eee; display: block; margin:0 auto; }
    body {
      background-color:black;
    }
    h1 {
      text-align: center;
      padding: 20px;
      font-family: monospace;
    }
  </style>
</head>
<body>
<div>
  <h1>TYTUŁ</h1>
</div>
<canvas id="myCanvas" width="480" height="320"></canvas>



<script>
  var canvas = document.getElementById("myCanvas");//znajduję canvas żeby javascript wiedziało o jego istnieniu
    var ctx = canvas.getContext("2d");// ctx to cusiek rządzący dwuwymiarowymi ksztautami
    var x = canvas.width/2;//początkowe x piłki
    var y = canvas.height-30;//początkowe y piłki
    var dx = 0;// iksowa prędkość piłki
    var dy = 0;//igrekowa prędkość piłki
    var ballRadius = 10;
    var paddleHeight = 10;
    var paddleWidth = 75;
    var paddleX = (canvas.width - paddleWidth) / 2;
    var rightPressed = false;// false = niewciśnięta prawa strzałka
    var leftPressed = false;// false = niewciśnięta lewa strzałka
    var upPressed = false;
    var downPressed = false;
    var enterPressed = false;
  var brickRowCount = 3;//inne cegłozmienne
    var brickColumnCount = 5;
    var brickWidth = 75;
    var brickHeight = 20;
    var brickPadding = 10;//odstęp między cegłami
    var brickOffsetTop = 30;//odstęp między cegłą a górną krawędzią canvas
    var brickOffsetLeft = 30;//odstęp między cegłą a  lewą krawędzią Canvas
  var arrowEndX = 200;
  var arrowEndY = 200;
  var arrowLenght = 50;
  var arrowAngle = 45;
  var score = 0;
  var lives = 3;
  var bricks = [];
  var ballInBrickX = false;
  var ballInBrickY = false;
  for(var c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(var r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status: 4};
    }
  }
  document.addEventListener("keydown", keyDownHandler, false);  //klawisz jest wciśnięty = uruchomienie funkcji keyDownHandler()
  document.addEventListener("keyup", keyUpHandler, false);
  document.addEventListener("mousemove", mouseMoveHandler, false);

function mouseMoveHandler(e) {
    var relativeX = e.clientX - canvas.offsetLeft;//ustawiam relativeX względem canvas a nie okna
    if (relativeX > paddleWidth/2 && relativeX < canvas.width - paddleWidth/2 ) {
      paddleX = relativeX - paddleWidth/2;
    }
}//ustawia relativeX na x myszy względem canvas i rusza paletką jeśli mysz jest w canvas.
function keyDownHandler(e) {//zmienia wartośćfunkcji klawiszowykrywających na true kiedy są wciśnięte
  if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = true;
    }
  if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = true;
    }
  if(e.key == "Up" || e.key == "ArrowUp") {
      upPressed = true;
  }
  if(e.key == "Down" || e.key == "ArrowDown") {
      downPressed = true;
  }
  if(e.key == "Enter") {
     enterPressed= true;
     console.log("enter");
  }
}
function keyUpHandler(e) {//zmienia wartośćfunkcji klawiszowykrywających na false kiedy są niewciśnięte
    if(e.key == "Right" || e.key == "ArrowRight") {
        rightPressed = false;
    }
    if(e.key == "Left" || e.key == "ArrowLeft") {
        leftPressed = false;
    }
    if(e.key == "Up" || e.key == "ArrowUp") {
        upPressed = false;
    }
    if(e.key == "Down" || e.key == "ArrowDown") {
        downPressed = false;
    }
    if(e.key == "Enter") {
          enterPressed = false;
      }
}
function brickCollisionDetection() {
  for (var c=0; c<brickColumnCount; c++) {
    for (var r=0; r<brickRowCount; r++) {
      var b = bricks[c][r];
      if(b.status > 0) {
        ballInBrickX = (x+ballRadius)>b.x && (x-ballRadius)<b.x + brickWidth;//sprawdzam czy x piłki jest gdzieś w x cegły
        ballInBrickY = (y+ballRadius)>b.y && (y-ballRadius)<b.y + brickHeight;//sprawdzam czy y piłki jest gdzieś w y cegły;
        if (ballInBrickX && ballInBrickY) {
          dy = -dy;//zawracam
          b.status--;//znikam cegłę
          score++;
          if (score == brickRowCount * brickColumnCount * 4) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            alert("WYGRAŁEŚ!");////
            document.location.reload();
          }//koniec wygrywacza
        }//koniec wykrywacza kolizjii
      }//koniec skanowania rozważanej cegły
    }//koniec jechania po rzędach
  }//koniec jechania po kolumnach
}//koniec brickCollisionDetection()//znika stuknięte cegły i informuje o wygranej
function wallAndPaddleCollisionDetection() {
  //jeśli piłka ZARAZ wleci w ścianę, to zawraca:
  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {// jeśli ZARAZ walnie w prawą albo lewą ścianę:
    dx = -dx;
  }
  if (y + dy < ballRadius) {//jeśli dotyka sufitu
    dy = -dy;
  }
  else if(y + dy > canvas.height - ballRadius) {//jeśli dotyka podłogi
    if(x > paddleX && x < paddleX + paddleWidth) {//jeśli jest między lewym a prawym brzegiem paletki to żyjemy
      dx = (x-paddleX - paddleWidth/2 - 10)/16;//NIE KASOWAĆ!!! należy rozszerzyć na ewentualną szeroką i wąską paletkę
      dy = -dy;
    }
    else {//jeśli nie trafi w paletkę to tracimy życie
      lives--;
      if(!lives) {
        window.cancelAnimationFrame(draw);
        alert("GAME OVER");
        document.location.reload();
      }
      else {//Powracamy do pozycji początkowej
        dy = 0;//zamraża ruch pilki
        dx = 0;
        x = canvas.width/2;
        y = canvas.height- paddleHeight - ballRadius - 1;
        paddleX = (canvas.width-paddleWidth)/2;
        arrowAngle = 90;
        drawArrow();
      }
    }//koniec zakańczacza gry ,,GAME OVER"
  }//koniec czujnika dotykania podłogi
}
function movePaddle(speed) {
  if(rightPressed) {
    paddleX += speed;
    if (paddleX + paddleWidth > canvas.width) {
        paddleX = canvas.width - paddleWidth;//jeśli ZARAZ
    }
  }
  else if(leftPressed) {
      paddleX -= speed;
      if (paddleX < 0){
          paddleX = 0;
      }
  }
}
function moveArrow(speed) {
  if(upPressed) {
    arrowAngle += speed;
    if (arrowAngle > 170) {
        arrowAngle = 170;
    }
  }
  else if(downPressed) {
      arrowAngle -= speed;
      if (arrowAngle < 10){
          arrowAngle = 10;
      }
  }
}
function drawScore() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "white";
  ctx.fillText("SCORE: " + score, 8, 20);
}
function drawLives() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "white";
  ctx.fillText("LIVES " + lives, canvas.width-65, 20);
}
function drawBall() {
    ctx.beginPath();
    ctx.arc(x, y, ballRadius, 0, Math.PI*2);//tworzy niewidzialne koło
    ctx.fillStyle = "white";//ustawia domyślny kolor kolorowania
    ctx.fill();// koloruje niewidzialne koło żeby było je widać
    ctx.closePath();
}//koniec funkcji drawBall()
function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
  ctx.fillStyle = "black";
  ctx.fill();
  ctx.closePath();
}
function drawArrow() {
  ctx.lineWidth = 3;
  ctx.strokeStyle = "#676767";
  ctx.beginPath();
  ctx.moveTo(paddleX + paddleWidth/2, canvas.height - paddleHeight -ballRadius -10);
  //rozłożyć poniższą linijkę na kilka kroków
  arrowEndX = paddleX + paddleWidth/2 + arrowLenght*Math.cos(arrowAngle*Math.PI/180)
  arrowEndY = canvas.height - paddleHeight - 2*ballRadius - arrowLenght*Math.sin(arrowAngle*Math.PI/180)
  ctx.lineTo(arrowEndX, arrowEndY);
  ctx.stroke();
  ctx.lineWidth = 1;
}
function drawBricks() {
      for(var c=0; c<brickColumnCount; c++) {
        for(var r=0; r<brickRowCount; r++) {
          if (bricks[c][r].status > 0){
            var brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;//OBLICZA odpowiednio x cegły
            var brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;//OBLICZA odpowiednio y
            bricks[c][r].x = brickX;//USTAWIA x cegły na obliczoną wyżej wartość
            bricks[c][r].y = brickY;//USTAWIA y cegły na obliczoną wyżej wartość
            ctx.beginPath();
            ctx.rect(brickX, brickY, brickWidth, brickHeight);
            if (bricks[c][r].status == 4) {
              ctx.fillStyle = "#ffee54";
            }
            if (bricks[c][r].status == 3) {
              ctx.fillStyle = "#ff9800";
            }
            if (bricks[c][r].status == 2) {
              ctx.fillStyle = "#f43636";
            }
            if (bricks[c][r].status == 1) {
              ctx.fillStyle = "#bd00ba";
            }
            ctx.fill();
            ctx.closePath();
          }//koniec sprawdzacza statusu
        }
      }
    }//koniec funkcji drawBricks

function draw() {
    ctx.fillStyle = "#3a3a3a";
    ctx.beginPath();
    ctx.rect(0, 0, canvas.width, canvas.height); // gumkuje całe canvas
    ctx.fill();
    ctx.closePath();
    drawBricks();
    drawBall();
    drawPaddle();
    drawScore();
    drawLives();
    brickCollisionDetection();
    wallAndPaddleCollisionDetection();
    if (dx == 0 && dy == 0) {//jeśli piłka jest zamrożona enter ją porusza
      if (enterPressed) {
        dx = (paddleX + paddleWidth/2 - arrowEndX)/-15;
        dy = (arrowEndY - y)/15;
      }
      x = paddleX + paddleWidth/2;
      drawArrow();//rysuje strzałkę do strzelania
      drawBall();
    }
    movePaddle(6);
    //PRZENIEŚ PONIŻSZY KOD W LEPSZE MIEJSCE
    moveArrow(3)
    x += dx;
    y += dy;
    requestAnimationFrame(draw);
  }//koniec funkcji draw
draw();

</script>

</body>
</html>
